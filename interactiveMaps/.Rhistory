rownames(subset(RColorBrewer::brewer.pal.info, category %in% c("qual")))                    ),
shiny::checkboxInput("legend", "Show legend", TRUE)
)) # End bootsrap
# Reactive expression for the data subsetted to what the user selected
server <- function(input, output, session) {
filteredData <- shiny::reactive({
databaseSpp %>%
dplyr::filter(eventDate <= input$range)
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- shiny::reactive({
leaflet::colorFactor(input$colors, databaseSpp[[column2Plot]])
})
output$map <- leaflet::renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet::leaflet(data = databaseSpp ) %>%
# Base map groups
leaflet::addTiles(group = "OSM (default)") %>%
#leaflet::addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
leaflet::fitBounds(~min(decimalLongitude), ~min(decimalLatitude),
~max(decimalLongitude), ~max(decimalLatitude))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
shiny::observe({
pal <- colorpal()
#### circles ####
leaflet::leafletProxy("map", data = filteredData()) %>%
leaflet::clearMarkers() %>%
leaflet::addCircleMarkers(#data = filteredData(),
lng = ~lng, lat = ~lat, ###then you can specify what do you want in the popup window from your database
group = column2Plot,
#group = speciesColumn,
#### 2.2 Point popup ####
popup = stringr::str_c(
sep = "",
"<b>Basic data </b> — ",
if("family" %in% colnames(databaseSpp)){
paste0("Family: ", filteredData()$family,
";   ")},
if("scientificName" %in% colnames(databaseSpp)){
paste0("Species: ", filteredData()$scientificName,
";   ")},
if("institutionCode" %in% colnames(databaseSpp)){
paste0(" institutionCode: ", filteredData()$institutionCode,
";   ")},
if("catalogNumber" %in% colnames(databaseSpp)){
paste0("catalogNumber: ", filteredData()$catalogNumber,
";   ")},
if("verbatimScientificName" %in% colnames(databaseSpp)){
paste0("Original name: ", filteredData()$verbatimScientificName,
";   ")},
if("scientificNameAuthorship" %in% colnames(databaseSpp)){
paste0("Authority: ", filteredData()$scientificNameAuthorship,
";   ")},
"<p></p><b>Collection data</b> — ",
if("recordedBy" %in% colnames(databaseSpp)){
paste0("Collector(s): ", filteredData()$recordedBy,
";   ")},
if("year" %in% colnames(databaseSpp)){
paste0("Year: ", filteredData()$year,
";   ")},
if("identifiedBy" %in% colnames(databaseSpp)){
paste0("Identified by: ", filteredData()$identifiedBy,
";   ")},
if("country" %in% colnames(databaseSpp)){
paste0("Country: ", filteredData()$country,
";   ")},
if("references" %in% colnames(databaseSpp)){
paste0("References: ", filteredData()$references,
"   ")},
"<p></p><b>column2Plot</b> — ",
paste0("column2Plot: ", filteredData()[[column2Plot]],
";   ")
), #you can add what do you want from columns of your database
#### 2.3 colour ####
fillOpacity = 0.5,
opacity = 1,
# colour determined by if else
fillColor = pal(filteredData()[[column2Plot]]),
# Stroke color
color = "black",
# Internal size
radius = 8,
# border size
weight = 1.5
)
})
shiny::observe({
proxy <- leaflet::leafletProxy("map", data = databaseSpp)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% leaflet::clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% leaflet::addLegend(pal = pal,
values = ~databaseSpp[[column2Plot]],
title = column2Plot,
position = "bottomright")
}
}) # END observe
}# END server function
shiny::shinyApp(ui, server)
?absolutePanel
# Create a Shiny page
ui <- shiny::bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
# Render the leaflet output
leaflet::leafletOutput("map", width = "100%", height = "100%"),
singleton(
tags$head(
tags$style(
".irs-bar {",
"  border-color: black;",
"  background-color: white;",
"}",
".irs-bar-edge {",
"  border-color: transparent;",
"  background-color: transparent;",
"}"
)
)
),
shiny::absolutePanel(top = 10, right = 10,
shiny::sliderInput("range", "Dates", min(databaseSpp$eventDate, na.rm = TRUE),
max(databaseSpp$eventDate, na.rm = TRUE),
value = range(databaseSpp$eventDate, na.rm = TRUE), step = 1
),
shiny::selectInput("colors", "Color Scheme",
rownames(subset(RColorBrewer::brewer.pal.info, category %in% c("qual")))                    ),
shiny::checkboxInput("legend", "Show legend", TRUE)
)) # End bootsrap
# Reactive expression for the data subsetted to what the user selected
server <- function(input, output, session) {
filteredData <- shiny::reactive({
databaseSpp %>%
dplyr::filter(eventDate <= input$range)
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- shiny::reactive({
leaflet::colorFactor(input$colors, databaseSpp[[column2Plot]])
})
output$map <- leaflet::renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet::leaflet(data = databaseSpp ) %>%
# Base map groups
leaflet::addTiles(group = "OSM (default)") %>%
#leaflet::addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
leaflet::fitBounds(~min(decimalLongitude), ~min(decimalLatitude),
~max(decimalLongitude), ~max(decimalLatitude))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
shiny::observe({
pal <- colorpal()
#### circles ####
leaflet::leafletProxy("map", data = filteredData()) %>%
leaflet::clearMarkers() %>%
leaflet::addCircleMarkers(#data = filteredData(),
lng = ~lng, lat = ~lat, ###then you can specify what do you want in the popup window from your database
group = column2Plot,
#group = speciesColumn,
#### 2.2 Point popup ####
popup = stringr::str_c(
sep = "",
"<b>Basic data </b> — ",
if("family" %in% colnames(databaseSpp)){
paste0("Family: ", filteredData()$family,
";   ")},
if("scientificName" %in% colnames(databaseSpp)){
paste0("Species: ", filteredData()$scientificName,
";   ")},
if("institutionCode" %in% colnames(databaseSpp)){
paste0(" institutionCode: ", filteredData()$institutionCode,
";   ")},
if("catalogNumber" %in% colnames(databaseSpp)){
paste0("catalogNumber: ", filteredData()$catalogNumber,
";   ")},
if("verbatimScientificName" %in% colnames(databaseSpp)){
paste0("Original name: ", filteredData()$verbatimScientificName,
";   ")},
if("scientificNameAuthorship" %in% colnames(databaseSpp)){
paste0("Authority: ", filteredData()$scientificNameAuthorship,
";   ")},
"<p></p><b>Collection data</b> — ",
if("recordedBy" %in% colnames(databaseSpp)){
paste0("Collector(s): ", filteredData()$recordedBy,
";   ")},
if("year" %in% colnames(databaseSpp)){
paste0("Year: ", filteredData()$year,
";   ")},
if("identifiedBy" %in% colnames(databaseSpp)){
paste0("Identified by: ", filteredData()$identifiedBy,
";   ")},
if("country" %in% colnames(databaseSpp)){
paste0("Country: ", filteredData()$country,
";   ")},
if("references" %in% colnames(databaseSpp)){
paste0("References: ", filteredData()$references,
"   ")},
"<p></p><b>column2Plot</b> — ",
paste0("column2Plot: ", filteredData()[[column2Plot]],
";   ")
), #you can add what do you want from columns of your database
#### 2.3 colour ####
fillOpacity = 0.5,
opacity = 1,
# colour determined by if else
fillColor = pal(filteredData()[[column2Plot]]),
# Stroke color
color = "black",
# Internal size
radius = 8,
# border size
weight = 1.5
)
})
shiny::observe({
proxy <- leaflet::leafletProxy("map", data = databaseSpp)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% leaflet::clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% leaflet::addLegend(pal = pal,
values = ~databaseSpp[[column2Plot]],
title = column2Plot,
position = "bottomright")
}
}) # END observe
}# END server function
shiny::shinyApp(ui, server)
# Create a Shiny page
ui <- shiny::bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
# Render the leaflet output
leaflet::leafletOutput("map", width = "100%", height = "100%"),
shiny::absolutePanel(top = 10, right = 10,
shiny::sliderInput("range", "Dates", min(databaseSpp$eventDate, na.rm = TRUE),
max(databaseSpp$eventDate, na.rm = TRUE),
value = range(databaseSpp$eventDate, na.rm = TRUE), step = 1
),
shiny::selectInput("colors", "Color Scheme",
rownames(subset(RColorBrewer::brewer.pal.info, category %in% c("qual")))                    ),
shiny::checkboxInput("legend", "Show legend", TRUE)
)) # End bootsrap
# Reactive expression for the data subsetted to what the user selected
server <- function(input, output, session) {
filteredData <- shiny::reactive({
databaseSpp %>%
dplyr::filter(eventDate <= input$range)
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- shiny::reactive({
leaflet::colorFactor(input$colors, databaseSpp[[column2Plot]])
})
output$map <- leaflet::renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet::leaflet(data = databaseSpp ) %>%
# Base map groups
leaflet::addTiles(group = "OSM (default)") %>%
#leaflet::addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
leaflet::fitBounds(~min(decimalLongitude), ~min(decimalLatitude),
~max(decimalLongitude), ~max(decimalLatitude))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
shiny::observe({
pal <- colorpal()
#### circles ####
leaflet::leafletProxy("map", data = filteredData()) %>%
leaflet::clearMarkers() %>%
leaflet::addCircleMarkers(#data = filteredData(),
lng = ~lng, lat = ~lat, ###then you can specify what do you want in the popup window from your database
group = column2Plot,
#group = speciesColumn,
#### 2.2 Point popup ####
popup = stringr::str_c(
sep = "",
"<b>Basic data </b> — ",
if("family" %in% colnames(databaseSpp)){
paste0("Family: ", filteredData()$family,
";   ")},
if("scientificName" %in% colnames(databaseSpp)){
paste0("Species: ", filteredData()$scientificName,
";   ")},
if("institutionCode" %in% colnames(databaseSpp)){
paste0(" institutionCode: ", filteredData()$institutionCode,
";   ")},
if("catalogNumber" %in% colnames(databaseSpp)){
paste0("catalogNumber: ", filteredData()$catalogNumber,
";   ")},
if("verbatimScientificName" %in% colnames(databaseSpp)){
paste0("Original name: ", filteredData()$verbatimScientificName,
";   ")},
if("scientificNameAuthorship" %in% colnames(databaseSpp)){
paste0("Authority: ", filteredData()$scientificNameAuthorship,
";   ")},
"<p></p><b>Collection data</b> — ",
if("recordedBy" %in% colnames(databaseSpp)){
paste0("Collector(s): ", filteredData()$recordedBy,
";   ")},
if("year" %in% colnames(databaseSpp)){
paste0("Year: ", filteredData()$year,
";   ")},
if("identifiedBy" %in% colnames(databaseSpp)){
paste0("Identified by: ", filteredData()$identifiedBy,
";   ")},
if("country" %in% colnames(databaseSpp)){
paste0("Country: ", filteredData()$country,
";   ")},
if("references" %in% colnames(databaseSpp)){
paste0("References: ", filteredData()$references,
"   ")},
"<p></p><b>column2Plot</b> — ",
paste0("column2Plot: ", filteredData()[[column2Plot]],
";   ")
), #you can add what do you want from columns of your database
#### 2.3 colour ####
fillOpacity = 0.5,
opacity = 1,
# colour determined by if else
fillColor = pal(filteredData()[[column2Plot]]),
# Stroke color
color = "black",
# Internal size
radius = 8,
# border size
weight = 1.5
)
})
shiny::observe({
proxy <- leaflet::leafletProxy("map", data = databaseSpp)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% leaflet::clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% leaflet::addLegend(pal = pal,
values = ~databaseSpp[[column2Plot]],
title = column2Plot,
position = "bottomright")
}
}) # END observe
}# END server function
shiny::shinyApp(ui, server)
?sliderInput
taxon2map = "Elapidae",
taxon2map = "Elapidae"
#### 1.0 Data prep ####
##### 1.1 Remove na ####
database <- database %>%
tidyr::drop_na(decimalLongitude, decimalLatitude) %>%
tidyr::drop_na(tidyselect::any_of(column2Plot))
##### 1.2 Prep. eventData ####
database <- database %>%
dplyr::mutate(eventDate = eventDate %>%
lubridate::year()) %>%
dplyr::arrange(eventDate)
##### 1.3 Species list ####
if(any(stringr::str_detect(speciesList, "ALL")) == FALSE){
# Prepare the data for the loop
database <- database %>%
# Select ONLY the species requested
dplyr::filter(.data[[speciesColumn]] %in% speciesList)
}else{
speciesList <- unique(database[[speciesColumn]])
} # END if else statement
# Make interactive maps in shiny
source(paste(ScriptPath, "ShinyMapR.R", sep = "/"))
shinyMapR(
# occurrence data
database = lizardData %>%
dplyr::mutate(basisOfRecord = stringr::str_replace_all(
basisOfRecord,
c("^OBSERVATION$" = "HUMAN_OBSERVATION",
"MATERIAL_SAMPLE" = "PRESERVED_SPECIMEN"))),
# column to plot
column2Plot = "basisOfRecord",
# the associated colour palette
palette = "ggthemes_solarized::violet",
# Directory where to save files
dir = paste0(RootPath, "/interactiveMaps"),
# Occurrence dataset column with species names... in this case use genus
taxonomyColumn = "family",
taxon2map = "Elapidae",
# Which species to map — a character vector of names or "ALL"
speciesList = "ALL",
# Jitter points to see stacking
jitterValue = NULL,
overWrite = TRUE
)
ShinyMapR(
# occurrence data
database = lizardData %>%
dplyr::mutate(basisOfRecord = stringr::str_replace_all(
basisOfRecord,
c("^OBSERVATION$" = "HUMAN_OBSERVATION",
"MATERIAL_SAMPLE" = "PRESERVED_SPECIMEN"))),
# column to plot
column2Plot = "basisOfRecord",
# the associated colour palette
palette = "ggthemes_solarized::violet",
# Directory where to save files
dir = paste0(RootPath, "/interactiveMaps"),
# Occurrence dataset column with species names... in this case use genus
taxonomyColumn = "family",
taxon2map = "Elapidae",
# Which species to map — a character vector of names or "ALL"
speciesList = "ALL",
# Jitter points to see stacking
jitterValue = NULL,
overWrite = TRUE
)
# Make interactive maps in shiny
source(paste(ScriptPath, "ShinyMapR.R", sep = "/"))
ShinyMapR(
# occurrence data
database = lizardData %>%
dplyr::mutate(basisOfRecord = stringr::str_replace_all(
basisOfRecord,
c("^OBSERVATION$" = "HUMAN_OBSERVATION",
"MATERIAL_SAMPLE" = "PRESERVED_SPECIMEN"))),
# column to plot
column2Plot = "basisOfRecord",
# the associated colour palette
palette = "ggthemes_solarized::violet",
# Directory where to save files
dir = paste0(RootPath, "/interactiveMaps"),
# Occurrence dataset column with species names... in this case use genus
taxonomyColumn = "family",
taxon2map = "Elapidae",
# Which species to map — a character vector of names or "ALL"
speciesList = "ALL",
# Jitter points to see stacking
jitterValue = NULL,
overWrite = TRUE
)
# Make interactive maps in shiny
source(paste(ScriptPath, "ShinyMapR.R", sep = "/"))
ShinyMapR(
# occurrence data
database = lizardData %>%
dplyr::mutate(basisOfRecord = stringr::str_replace_all(
basisOfRecord,
c("^OBSERVATION$" = "HUMAN_OBSERVATION",
"MATERIAL_SAMPLE" = "PRESERVED_SPECIMEN"))),
# column to plot
column2Plot = "basisOfRecord",
# the associated colour palette
palette = "ggthemes_solarized::violet",
# Directory where to save files
dir = paste0(RootPath, "/interactiveMaps"),
# Occurrence dataset column with species names... in this case use genus
taxonomyColumn = "family",
taxon2map = "Elapidae",
# Which species to map — a character vector of names or "ALL"
speciesList = "ALL",
# Jitter points to see stacking
jitterValue = NULL,
overWrite = TRUE
)
source("~/Desktop/Uni/PostDoc_applications/ALA_Tech/ACT_lizards/NewFunctions/ShinyMapR.R")
source("~/Desktop/Uni/PostDoc_applications/ALA_Tech/ACT_lizards/NewFunctions/ShinyMapR.R")
#### 2. Maps ####
# Make interactive maps to the family level based on a user input column
# I'm interested in looking at how sampling has changed through time according to basis of record.
# So, we will produce interactive maps that show this with a slider for filtering dates
source(paste(ScriptPath, "interactiveMapR.R", sep = "/"))
interactiveMapR(
# occurrence data
database = lizardData %>%
# Reassign some levels of basis of record
dplyr::mutate(basisOfRecord = stringr::str_replace_all(
basisOfRecord,
c("^OBSERVATION$" = "HUMAN_OBSERVATION",
"MATERIAL_SAMPLE" = "PRESERVED_SPECIMEN"))),
# choose the column to plot
column2Plot = "basisOfRecord",
# lat long columns
longitude = "decimalLongitude",
latitude = "decimalLatitude",
# the associated colour palette — from paleteer and passed to paletteer_dynamic (test below)
palette = "ggthemes_solarized::violet",
# Directory where to save files
dir = paste0(RootPath, "/interactiveMaps"),
# Occurrence dataset column with species names... in this case use genus
taxonomyColumn = "family",
# Which species to map — a character vector of names or "ALL"
speciesList = "ALL",
# Jitter points to see stacking
jitterValue = NULL,
# Change to TRUE if you want the map to show all points from when it opens
showAllOnStart = FALSE,
# Overwrite matching maps in the directory?
overWrite = TRUE
)
